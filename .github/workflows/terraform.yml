name: Terraform

on:
  push:
    branches:
      - master
      - feature/**
      - develop
      - qa
      - mock_prod
      - prod
    
  pull_request:
  
  paths:
      - "terraform/**"

jobs:
  build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    
    steps:
    
    - name: checkout code
      uses: actions/checkout@v2
      
    - name: setup terraform
      uses: hashicorp/setup-terraform@v1
      
    - name: terraform fmt
      id: fmt
      run: terraform fmt -check
 #     continue-on-error: true

    - name: terraform init
      id: init
      run: terraform init

    - name: terraform validate
      id: validate
      run: terraform validate -no-color

    - name: terraform plan
      id: plan
      run: terraform plan -no-color
 #     continue-on-error: true
 
    - name: comment pr
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
        <details><summary>Show Plan</summary>
      
        \`\`\`${process.env.PLAN}\`\`\`
      
        </details>
      
        *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
        
        github.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: output
        })
        
     - name: terraform apply
       if: github.event_name == 'push'
       run: terraform apply -auto-approve
