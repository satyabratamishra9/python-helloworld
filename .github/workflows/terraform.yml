name: Terraform

on:
  push:
    branches:
      - master
      - feature/**
      - develop
      - qa
      - mock_prod
      - prod
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
    
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  
defaults:
  run:
    working-directory: terraform
  
jobs:
  terraform:
    runs-on: ubuntu-latest
    
    env:
      PROJECT_ID: 'playground-s-11-a285c098'
    
    steps:
    
    - name: checkout code
      uses: actions/checkout@v2
    
    - name: setup env variables
      run: |
        CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
        
        if [ $CURRENT_BRANCH == develop ];
         then
           echo ::set-env name=ENV::dev
        
        elif [ `echo ${CURRENT_BRANCH::7}` == feature ];
         then
           FEATURE_TAG=$(echo $CURRENT_BRANCH | sed 's/\//-/')
           echo ::set-env name=ENV::${FEATURE_TAG}
          
        elif [ $CURRENT_BRANCH == qa ];
         then
           echo ::set-env name=ENV::qa

        elif [ $CURRENT_BRANCH == mock-prod ];
         then
           echo ::set-env name=ENV::mck-prd
          
        elif [ $CURRENT_BRANCH == prod ];
         then
           echo ::set-env name=ENV::prd
         
        else
           echo "merge to correct branch"
        fi
   
    - name: check project id
      run: |
        echo ${{ env.PROJECT_ID }}
        echo ${{ env.ENV }}
        
    - name: gcloud setup
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
          version: '290.0.1'
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
   # - name: activate service account 
   #   env: 
   #     SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
   #   run: |
   #     echo "$SERVICE_ACCOUNT_KEY" > ${HOME}/gcloud.json
   #     export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud.json"
   #     gcloud --quiet auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS} --project=${{ env.PROJECT_ID }}

    - name: setup terraform
      uses: hashicorp/setup-terraform@v1
       
    - name: terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: terraform init
      id: init
      run: terraform init

    - name: terraform validate
      id: validate
      run: terraform validate

    - name: terraform plan
      id: plan
      run: terraform plan -out=terraform.plan -var 'project_id=${{ env.PROJECT_ID }}'
 #     continue-on-error: true
   
    - uses: actions/github-script@0.9.0
 #     if: github.event_name == 'pull_request'
      env:
       PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
#       github-token: ${{ secrets.GITHUB_TOKEN }}
       script: |
        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
        <details><summary>Show Plan</summary>
      
        \`\`\`${process.env.PLAN}\`\`\`
      
        </details>
      
        *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
        
        github.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: output
        })
        
    - name: terraform apply
      if: github.event_name == 'push'
      run: terraform apply terraform.plan -auto-approve -var 'project_id=${{ env.PROJECT_ID }}'
